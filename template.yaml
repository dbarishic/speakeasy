AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Speakeasy

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  S3DeploymentsBucket:
    Description: The S3 bucket which contains the Lambda deployment package
    Type: String
    Default: speakeasy-deployments
  S3Mp3BucketName:
    Description: S3 bucket for storing processed mp3 files
    Type: String
    Default: speakeasy-mp3
  S3FileUploadBucketName:
    Description: Upload bucket
    Type: String
    Default: speakeasy-uploads
  DynamoDbTableName:
    Default: speakeasy-dynamo
    Description: DynamoDB table for storing email-file kv-pairs to be processed
    Type: String


Resources:
  S3FileUploadBucket:
    Type: AWS::S3::Bucket
    BucketName: !Ref S3FileUploadBucketName

  S3Mp3Bucket:
    Type: AWS::S3::Bucket
    BucketName: !Ref S3Mp3BucketName

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "fileHash"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "fileHash"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Ref DynamoDbTableName

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: speakeasy-dependencies
      CompatibleRuntimes:
        - java8
      ContentUri: ./dependency-layer.zip
      Description: Lambda layer containing all dependencies
      LicenseInfo: MIT

  SynthesizeSpeechFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: SpeakeasyFunctions
      Handler: com.dbarishic.speakeasy.SynthesizeSpeechFunction::handleRequest
      Runtime: java8
      Layers:
        - !Ref DependencyLayer
      MemorySize: 192
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: NAME
      Events:
        Speakeasy:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          BinaryMediaTypes:
            - audio~1mpeg
          Properties:
            Path: /synthesize-voice
            Method: post

      Role: !GetAtt [ SynthesizeSpeechFunctionRole, Arn ]

  SynthesizeSpeechFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonPollyFullAccess

  ListAvailableLanguagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpeakeasyFunctions
      Handler: com.dbarishic.speakeasy.ListAvailableLanguagesFunction::handleRequest
      Runtime: java8
      Layers:
        - !Ref DependencyLayer
      MemorySize: 192
      Environment:
        Variables:
          PARAM1: VALUE
      Events:
        Speakeasy:
          Type: Api
          Properties:
            Path: /get-languages
            Method: post
      Role: !GetAtt [ ListAvailableLanguagesFunctionRole, Arn ]

  ListAvailableLanguagesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonPollyFullAccess

  UploadObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpeakeasyFunctions
      Handler: com.dbarishic.speakeasy.UploadObjectFunction::handleRequest
      Runtime: java8
      Layers:
        - !Ref DependencyLayer
      MemorySize: 192
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3FileUploadBucketName
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        Speakeasy:
          Type: Api
          Properties:
            Path: /upload-file
            Method: post
      Role: !GetAtt [ UploadObjectFunctionRole, Arn ]

  UploadObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  SynthesizeDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpeakeasyFunctions
      Handler: com.dbarishic.speakeasy.SynthesizeDocumentFunction::handleRequest
      Runtime: java8
      Layers:
        - !Ref DependencyLayer
      MemorySize: 256
      Environment:
        Variables:
          MP3_BUCKET_NAME: !Ref S3Mp3BucketName
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        UploadDocumentEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3FileUploadBucket
            Events: s3:ObjectCreated:*
      Role: !GetAtt [ SynthesizeDocumentFunctionRole, Arn ]

  SynthesizeDocumentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonPollyFullAccess

  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpeakeasyFunctions
      Handler: com.dbarishic.speakeasy.SendEmailFunction::handleRequest
      Runtime: java8
      Layers:
        - !Ref DependencyLayer
      MemorySize: 192
      Environment:
        Variables:
          MP3_BUCKET_NAME: !Ref S3Mp3BucketName
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        SendEmailEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3Mp3Bucket
            Events: s3:ObjectCreated:*
      Role: !GetAtt [ SendEmailFunctionRole, Arn ]

  SendEmailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt SynthesizeDocumentFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !GetAtt S3FileUploadBucket.Arn

  LambdaInvokePermissionMp3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt SendEmailFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !GetAtt S3Mp3Bucket.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SpeakeasyApi:
    Description: "API Gateway endpoint URL for Prod stage for Speakeasy functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/synthesize-voice/"
  SynthesizeSpeechFunction:
    Description: "SynthesizeSpeechFunction Lambda Function ARN"
    Value: !GetAtt SynthesizeSpeechFunction.Arn
  SynthesizeSpeechFunctionIamRole:
    Description: "IAM Execution Role created for SynthesizeSpeechFunction function"
    Value: !GetAtt SynthesizeSpeechFunctionRole.Arn
  ListAvailableLanguagesFunction:
    Description: "ListAvailableLanguagesFunction Lambda Function ARN"
    Value: !GetAtt ListAvailableLanguagesFunction.Arn
  ListAvailableLanguagesFunctionRole:
    Description: "IAM Execution Role created for ListAvailableLanguagesFunction"
    Value: !GetAtt ListAvailableLanguagesFunctionRole.Arn
  UploadObjectFunction:
    Description: "UploadObjectFunction Lambda Function ARN"
    Value: !GetAtt UploadObjectFunction.Arn
  UploadObjectFunctionRole:
    Description: "UploadObjectFunctionRole Lambda Function ARN"
    Value: !GetAtt UploadObjectFunctionRole.Arn
  SynthesizeDocumentFunction:
    Description: "SynthesizeDocumentFunction Lambda Function ARN"
    Value: !GetAtt SynthesizeDocumentFunction.Arn
  SynthesizeDocumentFunctionRole:
    Description: "SynthesizeDocumentFunctionRole Lambda Function ARN"
    Value: !GetAtt SynthesizeDocumentFunctionRole.Arn
  SendEmailFunction:
    Description: "SendEmailFunction Lambda Function ARN"
    Value: !GetAtt SendEmailFunction.Arn
  SendEmailFunctionRole:
    Description: "SendEmailFunctionRole Lambda Function ARN"
    Value: !GetAtt SendEmailFunctionRole.Arn
